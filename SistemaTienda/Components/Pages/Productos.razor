@rendermode InteractiveServer
@page "/productos"
@using SistemaTienda.Models
@using SistemaTienda.Repositorio
@inject IRepositorioProductos repoProductos
@inject IRepositorioProveedores repoProveedores

<h3>Gestión de Productos</h3>

<EditForm Model="productoActual" OnValidSubmit="GuardarProducto" FormName="formProductos" novalidate>
    <DataAnnotationsValidator />

    <div class="mb-3">
        <label>Nombre:</label>
        <InputText class="form-control" @bind-Value="productoActual.Nombre" />
        <ValidationMessage For="@(() => productoActual.Nombre)" />
    </div>

    <div class="mb-3">
        <label>Precio:</label>
        <InputNumber class="form-control" @bind-Value="productoActual.Precio" />
        <ValidationMessage For="@(() => productoActual.Precio)" />
    </div>

    <div class="mb-3">
        <label>Stock:</label>
        <InputNumber class="form-control" @bind-Value="productoActual.Stock" />
        <ValidationMessage For="@(() => productoActual.Stock)" />
    </div>

    <div class="mb-3">
        <label>Proveedor:</label>
        <select class="form-control" @bind="productoActual.ProveedorId">
            <option value="">-- Selecciona un proveedor --</option>
            @foreach (var proveedor in proveedores)
            {
                <option value="@proveedor.Id">@proveedor.NombreEmpresa</option>
            }
        </select>
        <ValidationMessage For="@(() => productoActual.ProveedorId)" />
    </div>

    <button class="btn btn-primary" type="submit">
        @(productoActual.Id == 0 ? "Agregar" : "Actualizar")
    </button>

    @if (productoActual.Id != 0)
    {
        <button class="btn btn-secondary ms-2" type="button" @onclick="CancelarEdicion">Cancelar</button>
    }
</EditForm>

<hr />

<h5>Lista de Productos</h5>
<table class="table table-bordered">
    <thead>
        <tr>
            <th>Nombre</th>
            <th>Precio</th>
            <th>Stock</th>
            <th>Proveedor</th>
            <th>Acciones</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var producto in productos)
        {
            <tr>
                <td>@producto.Nombre</td>
                <td>@producto.Precio.ToString("C")</td>
                <td>@producto.Stock</td>
                <td>@proveedores.FirstOrDefault(p => p.Id == producto.ProveedorId)?.NombreEmpresa</td>
                <td>
                    <button class="btn btn-sm btn-warning me-2" @onclick="() => EditarProducto(producto)">Editar</button>
                    <button class="btn btn-sm btn-danger" @onclick="() => EliminarProducto(producto.Id)">Eliminar</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    private List<Producto> productos = new();
    private List<Proveedor> proveedores = new();
    private Producto productoActual = new();

    protected override async Task OnInitializedAsync()
    {
        productos = await repoProductos.ObtenerTodos();
        proveedores = await repoProveedores.ObtenerTodos();
    }

    private async Task GuardarProducto()
    {
        if (productoActual.Id == 0)
        {
            await repoProductos.Agregar(productoActual);
        }
        else
        {
            await repoProductos.Actualizar(productoActual);
        }

        productoActual = new();
        productos = await repoProductos.ObtenerTodos();
    }

    private void EditarProducto(Producto producto)
    {
        productoActual = new Producto
            {
                Id = producto.Id,
                Nombre = producto.Nombre,
                Precio = producto.Precio,
                Stock = producto.Stock,
                ProveedorId = producto.ProveedorId
            };
    }

    private async Task EliminarProducto(int id)
    {
        await repoProductos.Eliminar(id);
        productos = await repoProductos.ObtenerTodos();
    }

    private void CancelarEdicion()
    {
        productoActual = new();
    }
}
